include(cmake/Variables.cmake)

function(append_compile_flags flag)
  set(TMP_CXX_FLAGS "${TMP_CXX_FLAGS} ${flag}")
endfunction()

function(append_link_flags flag)
  set(TMP_LINK_FLAGS "${TMP_LINK_FLAGS} ${flag}")
endfunction()

function(set_compile_flags)
  if ((NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Release") AND (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "Debug") AND (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "RelWWithDebInfo"))
    message(FATAL_ERROR "Unknown CMAKE_BUILD_TYPE specified")
  endif()

  set(TMP_CXX_FLAGS "" PARENT_SCOPE)
  set(TMP_LINK_FLAGS "" PARENT_SCOPE)

  if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    set(TMP_CXX_FLAGS "${FAST_COMPILE_FLAGS}")
  elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set(TMP_CXX_FLAGS "${DEBUG_COMPILE_FLAGS}")
  elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    set(TMP_CXX_FLAGS "${FAST_COMPILE_FLAGS} -ggdb3")
  endif()

  get_property(CAN_USE_LLVM_LTO GLOBAL PROPERTY CAN_USE_LLVM_LTO)

  if ("${HCPU_LTO}" STREQUAL "ON" AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    append_compile_flags("-flto")
    append_link_flags("-flto")
    message(STATUS "Enabled LTO")
  elseif("${HCPU_LTO}" STREQUAL "ON" AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" AND "${CAN_USE_LLVM_LTO}" STREQUAL "YES")
    append_compile_flags("-flto=thin")
    append_link_flags("-flto=thin")
    message(STATUS "Enabled LTO")
  else()
    message(STATUS "LTO wasn't enabled")
  endif()

  string(TOLOWER "${HCPU_MARCH_NATIVE}" HCPU_MARCH_NATIVE)
  if ("${HCPU_MARCH_NATIVE}" STREQUAL "on")
    append_compile_flags("-march=native")
    message(STATUS "Enabled -march=native flag")
  endif()

  string(TOLOWER "${HCPU_X86_32}" HCPU_X86_32)
  if ("${HCPU_X86_32}" STREQUAL "on")
    append_compile_flags("-m32")
    message(STATUS "Enabled x86_32 building mode")
  endif()

  string(TOLOWER "${HCPU_SANITIZERS}" HCPU_SANITIZERS)
  if (NOT "${HCPU_SANITIZERS}" STREQUAL "off")
    append_compile_flags("-fsanitize=address,leak")
    append_link_flags("-fsanitize=address,leak")
    message(STATUS "Enabling sanitizers")
  endif()

  find_library(LIBUNWIND unwind)
  set(LIBUNWIND ${LIBUNWIND} PARENT_SCOPE)
  if (LIBUNWIND)
    message(STATUS "Found libunwind")
    append_compile_flags(-DHCPU_ENABLE_LIBUNWIND)
    append_link_flags(-L${ROOT_DIR}/dist/libbacktrace -lunwind -lbacktrace)
  endif()
  set_property(GLOBAL PROPERTY HCPU_COMPILE_FLAGS "${TMP_CXX_FLAGS}")
  set_property(GLOBAL PROPERTY HCPU_LINK_FLAGS "${TMP_LINK_FLAGS}")
endfunction()

function(detect_compilers)
  find_program(WHICH_AVAILABLE "which")
  if ("${WHICH_AVAILABLE}" STREQUAL WHICH_AVAILABLE-NOT_FOUND)
    message(WARNING "which binary is not found - using CMake compiler autodetection")
    set(HCPU_COMPILER auto)
  endif()

  string(TOLOWER "${HCPU_COMPILER}" HCPU_COMPILER)
  string(TOLOWER "${HCPU_LTO}" HCPU_LTO)
  string(SUBSTRING "${CMAKE_C_COMPILER}" 0 1 IS_ABS)

  if ("${HCPU_COMPILER}" STREQUAL "auto" OR "${HCPU_COMPILER}" STREQUAL "")
    message(STATUS "Using CMake compiler autodetection")
  elseif ("${HCPU_COMPILER}" STREQUAL "clang")
    if ("${CMAKE_C_COMPILER}" STREQUAL "" OR "${IS_ABS}" STREQUAL "/")
      message(STATUS "Searching for clang")
      execute_process(COMMAND which clang OUTPUT_VARIABLE CMAKE_C_COMPILER OUTPUT_STRIP_TRAILING_WHITESPACE)
      execute_process(COMMAND which clang++ OUTPUT_VARIABLE CMAKE_CXX_COMPILER OUTPUT_STRIP_TRAILING_WHITESPACE)
      set(CMAKE_C_COMPILER ${CMAKE_C_COMPILER} CACHE INTERNAL "CMAKE_C_COMPILER")
      set(CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER} CACHE INTERNAL "CMAKE_CXX_COMPILER")
    elseif (NOT "${IS_ABS}" STREQUAL "/")
      message(STATUS "Searching for ${CMAKE_C_COMPILER}")
      execute_process(COMMAND which ${CMAKE_C_COMPILER} OUTPUT_VARIABLE CMAKE_C_COMPILER OUTPUT_STRIP_TRAILING_WHITESPACE)
      execute_process(COMMAND which ${CMAKE_CXX_COMPILER} OUTPUT_VARIABLE CMAKE_CXX_COMPILER OUTPUT_STRIP_TRAILING_WHITESPACE)
      set(CMAKE_C_COMPILER ${CMAKE_C_COMPILER} CACHE INTERNAL "CMAKE_C_COMPILER")
      set(CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER} CACHE INTERNAL "CMAKE_CXX_COMPILER")
    endif()

    find_program(LLD_AVAILABLE "ld.lld")
    if ("${LLD_AVAILABLE}" STREQUAL LLD_AVAILABLE-NOT_FOUND AND "${HCPU_LTO}" STREQUAL "yes")
      message(WARNING "LLD not found: LLVM LTO will be disabled")
      set(CAN_USE_LLVM_LTO "NO" PARENT_SCOPE)
    else()
      execute_process(COMMAND which ld.lld OUTPUT_VARIABLE CMAKE_LINKER OUTPUT_STRIP_TRAILING_WHITESPACE)
      message(STATUS "Found LLD")
      set_property(GLOBAL PROPERTY CAN_USE_LLVM_LTO "YES")
    endif()
  elseif ("${HCPU_COMPILER}" STREQUAL "gcc")
    if ("${CMAKE_C_COMPILER}" STREQUAL "" OR "${IS_ABS}" STREQUAL "/")
      message(STATUS "Searching for gcc")
      execute_process(COMMAND which gcc OUTPUT_VARIABLE CMAKE_C_COMPILER)
      execute_process(COMMAND which g++ OUTPUT_VARIABLE CMAKE_CXX_COMPILER)
    elseif (NOT "${IS_ABS}" STREQUAL "/")
      message(STATUS "Searching for ${CMAKE_C_COMPILER}")
      execute_process(COMMAND which ${CMAKE_C_COMPILER} OUTPUT_VAR
IABLE CMAKE_C_COMPILER)
      execute_process(COMMAND which ${CMAKE_CXX_COMPILER} OUTPUT_VARIABLE CMAKE_CXX_COMPILER)
    endif()
  else()
    message(FATAL_ERROR "HCPU_COMPILER not specified: cannot proceed. Please specify one of: auto, clang, gcc.")
  endif()
endfunction()
